<?php
/**
 * @file
 */

// Drupal needs this blank file.
// Code below added manually by bhirsch.

//----------------------------------------//
// Drupal hooks                           //
//----------------------------------------//

/*
function ttt_page_alter(&$page) {
  dsm($page, 'page');  
}
// */

/**
 * Implements hook_menu().
 */
function ttt_menu() {
  $items = array();

  // Get term IDs for each term in Twitter Tag Types vocabulary.
  $results = db_select('taxonomy_vocabulary', 'tv')
    ->fields('tv', array('vid'))
    ->condition('machine_name', 'twitter_tag_types')
    ->execute()
    ->fetchAssoc();
  $vid = $results['vid'];
  $terms = taxonomy_get_tree($vid);
  $tids = array();
  foreach ($terms as $term) {
    $tids[] = $term->tid;
  } 

  foreach ($tids as $tid) {
    $items["ttt/index/$tid"] = array(
      'title' => 'Twitter Tag Type Index',
      'title callback' => 'ttt_index_title',
      'title arguments' => array(2),
      'description' => 'Listing of Twitter Tags by Type',
      'access arguments' => array('access content'),
      'page callback' => 'ttt_index_page',
      'page arguments' => array(2),
      'file' => 'ttt.index.inc',
      // TODO Why doesn't this menu show up? 
      'menu_name' => 'twitter-tag-types',
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_node_presave().
 * 
 * Invoke hook_ttt_tag_types() to give modules an opportunity
 * to add and alter $tags.
 * 
 */
function ttt_node_presave($node) {
  if ($node->type == 'tweet') {
    $original_tweet = $node->field_tweet_original['und'][0]['value'];
    // Add Twitter tag types (Twitter Tag Types vocabulary) 
    // to terms in Twitter Tags vocabulary.
    $tags = ttt_get_tags($original_tweet);
    // Give other modules a chance to modify $tags.
    // TODO move this stuff out of video_nominee module.
    foreach(module_implements('ttt_tag_types') as $module) {
      $tags = module_invoke($module, 'ttt_tag_types', $node, $tags);
    }
    // Now perpare terms as taxonomy terms.
    if (!empty($tags)) {
      $tags = ttt_save_tags($tags); // TODO?
    }
    // Add terms to node.
    $node->field_twitter_tags['und'] = $tags;
  }
}

/**
 * Implments hook_theme().
 */
function ttt_theme($existing, $type, $theme, $path) {
  return array(
    'ttt_index_term' => array(
      //'render element' => 'element',
      'variables' => array('item' => NULL),
      'file' => 'ttt.index.inc',
    ),
  );  
}

//-----------------------------------------------//
// Twitter Tag Types (ttt) functions             //
//-----------------------------------------------//

/**
 * Get Twitter tags and tag types. 
 * 
 * If $original_tweet string is passed, the function returns
 * tags ang tag types for tags included in the particular tweet being saved.
 * Otherwise ttt_get_tags() returns all cached Twitter tags with their types.
 * 
 * When the tweet contains hashtags or mentions that have already
 * been saved, these tags are merged with existing tags (which may include 
 * Twitter Tag Types terms added by other modules or users.)
 * 
 * @param $original_tweet
 *  string.
 * 
 * @return $tags or $existing_tags
 *  Return an array keyed by tag names.
 *    $tags['name'] = array('types', 'go', 'here');
 *    e.g. 
 *    $tags['#example'] = array('hashtag', 'x', 'y', 'z');
 *    $tags['@jane'] = array('mention', 'a', 'b', 'c');
 */
function ttt_get_tags($original_tweet = NULL) {
  $existing_tags = variable_get('twitter_tags', NULL);

  // No $original_tweet passed. Return all existing tags.
  if (!$original_tweet) {
    return $existing_tags;
  }
  // Pull tags out of tweet and return those.
  else {
    $tags = array();
    // @todo $node object in ttt_node_presave() may still have names stored here: 
    //   $node->field_twitter_tags['und'][0]->name;
    //   Maybe more efficient to use this rather than regenerate from 
    //   $original_tweet again.
    $words = twitter_tweet_get_tags($original_tweet);
    foreach($words as $word) {
      // If the tag already exists, preserve existing tag types.
      if (array_key_exists($word, $existing_tags)) {
        $tags[$word] = $existing_tags[$word];
      }
      // The tag is new. All new Twitter Tags terms begin their lives as 
      // a hashtag (#) or a mention (@).
      // Get hashtags.
      if (strlen($word) > 1) {
        if (substr($word, 0, 1) == '#') {
          $tags[$word][] = 'hashtag';
        } 
        // Get mentions.
        else  if (substr($word, 0, 1) == '@') {
          $tags[$word][] = 'mention';
        } 
      }
    }
  }

  return $tags;
}

/**
 * Wrapper function for variable_set().
 *
 * @param $tags 
 *    $tags['name'] = array('types', 'go', 'here');
 *    e.g. 
 *    $tags['#example'] = array('hashtag', 'x', 'y', 'z');
 *    $tags['@jane'] = array('mention', 'a', 'b', 'c');
 */
function ttt_set_tags($tags) {
  variable_set('twitter_tags', $tags);
}

/**
 * @param $tags
 *  $tags['#example'] => array('hashtag', 'video-category', 'etc');
 * 
 * @return $value
 *  Array of taxonomy term arrays.
 *
 * @see taxonomy_autocomplete_validate().
 * @see taxonomy_field_presave().
 */
function ttt_save_tags($tags) {
  // Save the tags in $tag['#tag_name'] => array(hashtag, x, y, z) format
  // in the variables table for easy access.
  ttt_set_tags($tags);

  $value = array();

  // Collect candidate vocabularies.
  $vocabularies = array();
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('twitter_tags')) {
    $vocabularies[$vocabulary->vid] = $vocabulary;
  }

  // Translate term names into actual terms.
  //$typed_terms = drupal_explode_tags($tags);
  foreach ($tags as $tag_name => $tag_types) {
    // First save any new tag types. These are taxonomy terms too.
    $types = ttt_save_tag_types($tag_types);

    // See if the term exists and return the tid;
    // otherwise, create a new term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($tag_name), 'vid' => array_keys($vocabularies)))) {
      $term = array_pop($possibilities);
      // Check Twitter tag types and path alias.
      if ($term->field_twitter_tag_types['und'] != $types || empty($term->path['alias'])) {
        $term->field_twitter_tag_types = array('und' => $types);
        taxonomy_term_save($term);
      }
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'vid' => $vocabulary->vid,
        'name' => $tag_name,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
      $term = (object) $term;
      $term->field_twitter_tag_types = array('und' => $types);
      taxonomy_term_save($term); // We need the tid before we can set the alias.
    }
    $value[] = (array)$term;
  }

  return $value;
}

/**
 * @param $tag_types
 *  Array of tag types like this: array('hashtag', 'x', 'y', 'z').
 * 
 * @return $types
 *  An array of taxonomy term arrays ready to be saved 
 *  in a tweet's field_twitter_tag_type.
 */
function ttt_save_tag_types($tag_types) {
  $types = array();

  // Collect candidate vocabularies.
  $vocabularies = array();
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('twitter_tag_types')) {
    $vocabularies[$vocabulary->vid] = $vocabulary;
  }

  // Translate term names into actual terms.
  foreach ($tag_types as $type) {
    // See if the term exists and return the tid;
    // otherwise, create a new term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($type), 'vid' => array_keys($vocabularies)))) {
      $term = array_pop($possibilities);
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'vid' => $vocabulary->vid,
        'name' => $type,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
      $term = (object) $term;
      taxonomy_term_save($term);
      $term = (array) $term;
    }
    $types[] = (array)$term;
  }

  return $types;
}

/**
 * Twitter Tags have a taxonomy field called Twitter Tag Type.
 * This function takes a Twitter tag and returns it's types.
 * Standard types include "hashtag" and "mention". Other modules
 * can add their own Twitter tag types.
 * 
 * @param $param
 *  Integer, term id of a Twitter tag.
 *   Or
 *  Object, Twitter Tag term object.
 * 
 * @return
 *  Array $tag_types = array( tid => 'tag type name' );
 */
function ttt_get_tag_types($param) {
  $tag_types = array();
  $tids = array();

  if (is_object($param)) {
    $tag = $param;  
  }
  else if (is_numeric($param)) {
    $tid = $param;   
    $tag = taxonomy_term_load($tid);
  }

  if (property_exists($tag, 'field_twitter_tag_types') 
  && isset($tag->field_twitter_tag_types)) {
    foreach ($tag->field_twitter_tag_types as $types) {
      foreach ($types as $type) {
        $tids[] = $type['tid'];
      }
      $tag_types = taxonomy_term_load_multiple($tids);
      foreach ($tag_types as $tid => $obj) {
        $tag_types[$tid] = $obj->name;  
      }
    }

  return $tag_types;
  }
  else {
    return FALSE;  
  }
}
