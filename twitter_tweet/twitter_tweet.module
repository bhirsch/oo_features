<?php
/**
 * @file
 * Code for the Twitter Tweet feature.
 */

include_once('twitter_tweet.features.inc');
include_once('twitter_tweet.theme.inc');

/**
 * Implements hook_node_validate().
 *
 * Note: hook_node_validate() is not called when Tweets are imported 
 * from Twitter via Feeds module.
 * Feeds saves tweet nodes by calling node_save(). There is no 
 * opportunity to validate these nodes before node_saved() gets called.
 * node_save() invokes hook_node_presave(), do any "validation" stuff there.
 * Unfortunately, this limits our ability to prevent importing nodes that would 
 * normally not make it through validation. 
 * @todo This might be able to be handled with a custom Feeds processor.
 * @todo The other option is to have some sort of queue for (manually?) processing bad 
 *  nodes after they've been imported.
 * 
 */
/*
function twitter_tweet_node_validate($node, $form, &$form_state) {
}
// */

/**
 * Implements hook_node_presave().
 *
 * Tag tweets with Twitter tags (taxonomy terms belonging to the vocabulary
 * Twitter Tags).
 * 
 * Invoke hook_twitter_tweet_tags() to give modules an opportunity
 * to add and alter $tags.
 * 
 */
function twitter_tweet_node_presave($node) {
  if ($node->type == 'tweet') {
    $original_tweet = $node->field_tweet_original['und'][0]['value'];

    // Add taxonomy terms to Twitter Tags vocabulary.
    //
    // Pull tags out of tweet in a comma separated list.
    $tags = twitter_tweet_get_tags($original_tweet);
    // Give other modules a chance to alter $tags.
    $tags = module_invoke_all('twitter_tweet_tags_alter', $node, $tags);
    // Now perpare terms as taxonomy terms.
    if (!empty($tags)) {
      $tags = twitter_tweet_save_tags($tags);
    }
    // Add terms to node.
    $node->field_twitter_tags['und'] = $tags;

  }
}

/**
 * Get hashtags and mentions from original tweet. 
 * 
 * @param $original_tweet
 *  String, tweet from twitter.
 * 
 * @return $tags.
 *  Return an array keyed by tag names.
 *    $tags['name'] = array('types', 'go', 'here');
 *    e.g. 
 *    $tags['#example'] = array('hashtag', 'x', 'y', 'z');
 *    $tags['@jane'] = array('mention', 'a', 'b', 'c');
 */
function twitter_tweet_get_tags($original_tweet) {
  // Replace punctuation with spaces.
  $tweet = twitter_tweet_replace_punctuation($original_tweet);
  $tags = array();

  // Get hashtags.
  $words = explode(' ', $tweet);
  foreach($words as $word) {
    if (substr($word, 0, 1) == '#') {
      $tags[$word][] = 'hashtag';
    } 
  }

  // Get mentions.
  foreach($words as $word) {
    if (substr($word, 0, 1) == '@') {
      $tags[$word][] = 'mention';
    } 
  }

  return $tags;
}

/**
 * @param $original_tweet
 *  String, original Twitter tweet.
 *
 * @return $tweet
 *  String with punctuation that breaks Twitter hashtags and mentions replaced with 
 *  spaces.
 */
function twitter_tweet_replace_punctuation($original_tweet) {
  // Punctuation marks, except underscore, end hashtag wherever punctuation occurs.
  // Replace this punctuation with spaces, so it's easy to explode and create taxonomy
  // terms corresponding with actual Twitter hashtags and user mentions.
  // e.g. on Twitter #this-breaks creates a hashtag called #this.
  $chars = array();
  $chars['find'] = array(
    '-',"'",'.',':',';',
    '~','`','!','$','%','^',
    '&','*','(',')','+','=','<','>',
    '/','?',',','[','{',']','}','|','\\',
  );
  // Create a replacement for each character in the $chars['find'] array.
  foreach($chars as $char) {
    $chars['replace'] = ' ';
  }
  $tweet = str_replace($chars['find'], $chars['replace'], $original_tweet);

  // @todo Check for rogue @ or # symbols standing alone.

  return $tweet;
}

/**
 * @param $word
 *  string
 *
 * @return $word
 *  string with punctuation that breaks hashtags and user references filtered out.
 *
 * @todo Is this still useful or used anywhere? Remove?
 */
function twitter_tweet_filter_punctuation($word) {
  // Punctuation marks, except underscore, end hashtag wherever punctuation occurs.
  // Filter out stuff that breaks Twitter hashtags, so the taxonomy
  // terms match real Twitter hashtags.
  // e.g. on Twitter #this-breaks creates a hashtag called #this.
  $chars = array(
    '@','#', // Note: if ($position = strpos($word, $char)) evaluates false below,
             // so this doesn't break hashtags and user refrences beginning with 
             // @ or #.
    '-',"'",'.',':',';',
    '~','`','!','$','%','^',
    '&','*','(',')','+','=','<','>',
    '/','?',',','[','{',']','}','|','\\',
  );
  foreach($chars as $char) {
    if ($position = strpos($word, $char)) {
      $word = substr($word, 0, $position);
    }
  }

  return $word; 
}

/**
 * @param $tags
 *  $tags array returned by twitter_tweet_get_tags().
 * 
 * @return $value
 *  Array of taxonomy term arrays.
 *
 * @see taxonomy_autocomplete_validate().
 * @see taxonomy_field_presave().
 */
function twitter_tweet_save_tags($tags) {
  $value = array();

  // Collect candidate vocabularies.
  $vocabularies = array();
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('twitter_tags')) {
    $vocabularies[$vocabulary->vid] = $vocabulary;
  }

  // Translate term names into actual terms.
  //$typed_terms = drupal_explode_tags($tags);
  foreach ($tags as $tag_name => $tag_types) {
    // First save any new tag types. These are taxonomy terms too.
    $types = twitter_tweet_save_tag_types($tag_types);

    // See if the term exists and return the tid;
    // otherwise, create a new term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($tag_name), 'vid' => array_keys($vocabularies)))) {
      $term = array_pop($possibilities);
      // Check Twitter tag types.
      if ($term->field_twitter_tag_types['und'] != $types) {
        $term->field_twitter_tag_types = array('und' => $types);
        taxonomy_term_save($term);
      }
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'vid' => $vocabulary->vid,
        'name' => $tag_name,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
      $term = (object) $term;
      $term->field_twitter_tag_types = array('und' => $types);
      taxonomy_term_save($term);
    }
    $value[] = (array)$term;
  }

  return $value;
}

/**
 * @param $tag_types
 *  Array of tag types like this: array('hashtag', 'x', 'y', 'z').
 * 
 * @return $types
 *  An array of taxonomy term arrays ready to be saved 
 *  in a tweet's field_twitter_tag_type.
 */
function twitter_tweet_save_tag_types($tag_types) {
  $types = array();

  // Collect candidate vocabularies.
  $vocabularies = array();
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('twitter_tag_types')) {
    $vocabularies[$vocabulary->vid] = $vocabulary;
  }

  // Translate term names into actual terms.
  foreach ($tag_types as $type) {
    // See if the term exists and return the tid;
    // otherwise, create a new term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($type), 'vid' => array_keys($vocabularies)))) {
      $term = array_pop($possibilities);
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'vid' => $vocabulary->vid,
        'name' => $type,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
      $term = (object) $term;
      taxonomy_term_save($term);
      $term = (array) $term;
    }
    $types[] = (array)$term;
  }

  return $types;
}

/**
 * Twitter Tags have a taxonomy field called Twitter Tag Type.
 * This function takes a Twitter tag and returns it's types.
 * Standard types include "hashtag" and "mention". Other modules
 * can add their own Twitter tag types.
 * 
 * @param $param
 *  Integer, term id of a Twitter tag.
 *   Or
 *  Object, Twitter Tag term object.
 * 
 * @return
 *  Array $tag_types = array( tid => 'tag type name' );
 */
function twitter_tweet_get_tag_types($param) {
  $tag_types = array();
  $tids = array();

  if (is_object($param)) {
    $tag = $param;  
  }
  else if (is_numeric($param)) {
    $tid = $param;   
    $tag = taxonomy_term_load($tid);
  }

  if (property_exists($tag, 'field_twitter_tag_types') 
  && isset($tag->field_twitter_tag_types)) {
    foreach ($tag->field_twitter_tag_types as $types) {
      foreach ($types as $type) {
        $tids[] = $type['tid'];
      }
      $tag_types = taxonomy_term_load_multiple($tids);
      foreach ($tag_types as $tid => $obj) {
        $tag_types[$tid] = $obj->name;  
      }
    }

  return $tag_types;
  }
  else {
    return FALSE;  
  }
}

/**
 * Implements hook_taxonomy_term_presave(). 
 * 
 * Generate path alias for terms. 
 *
 * @todo Add admin option to disable auto-creation of term path.
 */
function twitter_tweet_taxonomy_term_presave($term) {
  if ($term->vocabulary_machine_name == 'twitter_tags') {
    if ($alias = _twitter_tweet_term_alias($term)) {
      $term->path['alias'] = $alias;
      // @todo Revisit. Language 'und' probably shouldn't be hardcoded.
      $term->path['language'] = 'und';
    }
    // @todo All Twitter Tags are hashtags OR mentions. Never both. Add validation here.
  }
}

/**
 * @param $term
 *  Taxonomy term object.
 * 
 * @return 
 *  String for alias to be used in $term->path['alias'].
 */
function _twitter_tweet_term_alias($term) {
  $alias = '';

  // This has already been striped of spaces and punctuation.
  // Twitter tags begin with @ or #.
  $name = $term->name;
  if (substr($name, 0, 1) == '#') {
    $alias = t('hashtag') . '/' . substr($name, 1);  
  }
  else if (substr($name, 0, 1) == '@') {
    $alias = t('mention') . '/' . substr($name, 1);  
  }
  else {
    return FALSE;  
  }

  return $alias;
}
