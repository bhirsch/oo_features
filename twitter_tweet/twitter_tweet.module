<?php
/**
 * @file
 * Code for the Twitter Tweet feature.
 */

include_once('twitter_tweet.features.inc');
include_once('theme/twitter_tweet.theme.inc');


/**
 * Note: hook_node_validate() is not called when Tweets are imported 
 * from Twitter via Feeds module.
 * 
 * Feeds saves tweet nodes by calling node_save(). There is no 
 * opportunity to validate these nodes before node_saved() gets called.
 * node_save() invokes hook_node_presave(), do any "validation" stuff there.
 * Unfortunately, this limits our ability to prevent importing nodes that would 
 * normally not make it through validation. 
 * @todo This might be able to be handled with a custom Feeds processor.
 * @todo The other option is to have some sort of queue for (manually?) processing bad 
 *  nodes after they've been imported.
 * 
 */

/**
 * Implements hook_node_presave().
 *
 * Tag tweets with Twitter tags (taxonomy terms belonging to the vocabulary
 * Twitter Tags).
 * 
 */
function twitter_tweet_node_presave($node) {
  if ($node->type == 'tweet') {
    $original_tweet = $node->field_tweet_original['und'][0]['value'];

    // Add taxonomy terms to Twitter Tags vocabulary.
    // Pull tags out of tweet.
    $tags = twitter_tweet_get_tags($original_tweet);
    // Now perpare terms as taxonomy terms.
    if (!empty($tags)) {
      $tags = twitter_tweet_save_tags($tags);
    }
    // Add terms to node.
    $node->field_twitter_tags['und'] = $tags;

  }
}


/**
 * @param $original_tweet
 *  String, original Twitter tweet.
 *
 * @return $tweet
 *  String with punctuation that breaks Twitter hashtags and mentions replaced with 
 *  spaces.
 */
function twitter_tweet_replace_punctuation($original_tweet) {
  // Punctuation marks, except underscore, end hashtag wherever punctuation occurs.
  // Replace this punctuation with spaces, so it's easy to explode and create taxonomy
  // terms corresponding with actual Twitter hashtags and user mentions.
  // e.g. on Twitter #this-breaks creates a hashtag called #this.
  $chars = array();
  $chars['find'] = array(
    '-',"'",'.',':',';',
    '~','`','!','$','%','^',
    '&','*','(',')','+','=','<','>',
    '/','?',',','[','{',']','}','|','\\',
  );
  // Create a replacement for each character in the $chars['find'] array.
  foreach($chars as $char) {
    $chars['replace'] = ' ';
  }
  $tweet = str_replace($chars['find'], $chars['replace'], $original_tweet);
  // Check for rogue @ or # symbols standing alone.
  $tweet = str_replace(' # ', ' ', $tweet);
  $tweet = str_replace(' @ ', ' ', $tweet);
  // Get rid of empty white space and double spaces, otherwise
  // explode() won't work correctly.
  $tweet = trim($tweet);
  $tweet = str_replace('  ', ' ', $tweet);

  return $tweet;
}

/**
 * @param $original_tweet
 *  String. Twitter tweet.
 * 
 * @return 
 *  array('#tag1', '@tag2', '#tagN');
 */
function twitter_tweet_get_tags($original_tweet) {
  // Pull tags out of tweet and return those.
  // Replace punctuation with spaces.
  $tweet = twitter_tweet_replace_punctuation($original_tweet);
  $tags = array();

  $words = explode(' ', $tweet);
  foreach($words as $word) {
    if (substr($word, 0, 1) == '#' || substr($word, 0, 1) == '@') {
      $tags[] = $word;
    } 
  }

  return $tags;
}

/**
 * @param $tags
 *  $tags array returned by twitter_tweet_get_tags().
 *  Like this: array('#tag1', '@tag2', '#tagN');
 * 
 * @return $value
 *  Array of taxonomy term arrays.
 *
 * @see taxonomy_autocomplete_validate().
 * @see taxonomy_field_presave().
 */
function twitter_tweet_save_tags($tags) {
  $value = array();

  // Collect candidate vocabularies.
  $vocabularies = array();
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('twitter_tags')) {
    $vocabularies[$vocabulary->vid] = $vocabulary;
  }

  // Translate term names into actual terms.
  //$typed_terms = drupal_explode_tags($tags);
  foreach ($tags as $tag_name) {
    // See if the term exists and return the tid;
    // otherwise, create a new term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($tag_name), 'vid' => array_keys($vocabularies)))) {
      $term = array_pop($possibilities);
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'vid' => $vocabulary->vid,
        'name' => $tag_name,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
      $term = (object)$term;
      taxonomy_term_save($term);
    }
    $value[] = (array)$term;
  }

  return $value;
}
