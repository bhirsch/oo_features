<?php
/**
 * @file
 * Code for the Video Nominee feature.
 */

/**
 * When tweets are imported from twitter, check to see if they're 
 * video nominations. If they are, add relevant terms to Twitter Tag Types.
 * 
 * Implements hook_ttt_tag_types().
 *
 * @param $node
 *  Node object of tweet node during hook_node_presave().
 * 
 * @param $tags
 *  Array of Twitter Tags terms to be saved with $node.
 *
 * @return $tags
 *  Modified terms to save with $node.
 */
function video_nominee_ttt_tag_types($node, $tags) {
  // Check tweet to determine if it's a video nomination. 
  // If it is, get info.
  $nomination_info = _video_nominee_nomination_info($original_tweet, $node);

  // If tweet is a valid nomination, 
  // assign hashtag types and create a corresponding video_nominee node.
  if ($nomination_info['valid']) { 
    // TODO rework this...
    $tags = _video_nominee_tag_types($nomination_info, $tags);
  } 
  else {
    $txt = t('Please contact and administrator about the tweet: !tweet. ', 
             array('!tweet' => $nomination_info['original tweet']));
    $txt .= $nomination_info['error message'];
    watchdog('video_nominee', $txt, WATCHDOG_WARNING);
    drupal_set_message($txt, 'warning');
    // @todo Process hashtags that are not new nominations.
  }

  return $tags;  
}

//------------------------------------------------------//
// Internal functions                                   //
//------------------------------------------------------//

/**
 * Implments hook_tweet_media_validate_url().
 * 
 * @param $url_info
 *  $url_info = array(
 *    'original_url' => 'http://bit.ly/xyz',
 *    'destination_url' => 'http://youtube.com/xyz',
 *    'valid' => TRUE, // or FALSE
 *    'error message' => 'explain why false if it's false',
 *    'error code' => '123',
 *  );
 * 
 * @return $url_info
 *  Modified $url_info array.
 */
function video_nominee_tweet_media_validate_url($url_info) {
  $url = $url_info['destination_url'];
  // Check to see if this URL has been saved with any other tweets yet.
  $results = db_query('SELECT field_media_url_url '
                    . 'FROM field_data_field_media_url '
                    . 'WHERE field_media_url_url = :url', array(':url' => $url))->fetchAll();
  if (!empty($results)) {
    $url_info['valid'] = FALSE; 
    $url_info['error message'] = t('This URL has already been nominated for @onlineoscars '
                                 . '!url.', array('!url' => $url));
    $url_info['error code'] = 010;
  }
  
  return $url_info;
}

/**
 * Test URL for new video name.
 * If the URL already exists, it will be filtered out during hook_tweet_media_validate_url().
 * Here's what we're checking for: 
 * - Confirm there's a URL in the first sentence of the tweet.
 * - Check $node object and confirm new URL made it through the validate_url filter.
 *   If there's no URL, this Tweet's URL must exist under a different name, or it's invalid.
 * - @todo count number of URLs in tweet. add more rigorous validate if there are 
 *   more than one URL in tweet.
 * 
 * @todo Where should we notify user? Here or under hook_tweet_media_validate_url()?
 * 
 * @param $node
 *  string
 * 
 * @return
 *  $url_info['valid'] = TRUE/FALSE;
 *  $url_info['error code'] = integer
 *  $url_info['error message'] = string
 */
function _video_nominee_url_info($node) {
  $url_info = array();
  $url_info['valid'] = FALSE; // Assume invalid until we prove otherwise.
  $original_tweet = $node->field_tweet_original['und'][0]['value'];

  // Check $node object and confirm URL made it through video_nominee's implementation 
  // of hook_tweet_media_validate_url(). 
  $is_valid = FALSE;
  foreach ($node->field_media_url['und'] as $delta => $media_url) {
    if (empty($media_url['url'])) {
      // This is just for good measure. Unset field if anything snuck through without a url.
      unset($node->field_media_url['und'][$delta]); 
    } else {
      // The tweet contained at least one valid URL.  
      $is_valid = TRUE;
    }
  }
  if (!$is_valid) {
    $url_info['error code'] = 111;
    $url_info['error message'] = t('No valid URL. '
                                 . 'Either this video has already been nominated or '
                                 . 'the URL was invalid: !tweet',  
                                  array('!tweet' => $original_tweet));
    return $url_info;
  }

  // Confirm there's a URL in the first sentence of the tweet.
  // there's no URL, this Tweet's URL must exist under a different name, or it's invalid.
  $end = (strpos($original_tweet, '.')) ? strpos($original_tweet, '.') : strlen($original_tweet);
  if (!strpos($original_tweet, 'http://', $end)) {
    // There's no URL in the first sentence. Invalid.
    $url_info['error code'] = 111;
    $url_info['error message'] = t('No URL found in first sentence of tweet, !tweet ', 
                                  array('!tweet' => $original_tweet));
    return $url_info;
  }

  // If we made it this far, URL is valid.
  $url_info['valid'] = TRUE;

  return $url_info;
}

/**
 * Get video name.
 * - video name is the only hashtag in the first sentence of the tweet.
 * - check if name already exists
 * 
 * @params
 * TODO
 * @return
 *  $name_info['valid']
 *  $name_info['video name']
 *  $name_info['new name']
 *  $name_info['name tag'] // taxonomy term object for video name if it already exists
 *  $name_info['error code']
 *  $name_info['error message']
 */
function video_nominee_name($nomination_info, $original_tweet) {
  // Take the URL out of the tweet, otherwise periods make it difficult
  // to examine it.
  /*
  $replace_url = ' ';
  $tweet = preg_replace("
    #((http|https|ftp)://(\S*?\.\S*?))(\s|\;|\)|\]|\[|\{|\}|,|\"|'|:|\<|$|\.\s)#ie",
      $replace_url, $original_tweet);
  // */
  // Now get the beginning and end of the first sentence.
  $end = (strpos($original_tweet, '.')) ? 
          strpos($original_tweet, '.') : strlen($original_tweet);
  $string = substr($original_tweet, 0, $end);
  // Get Twitter tags from first sentence. There should only be one tag, the video name.
  $tags = twitter_tweet_get_tags($string);
  $count = 0; // Count the number of hashtags returned. There should only be one.
  foreach ($tags as $tag) {
    // We're not interested in mentions (@), only hashtags (#).
    if (substr($tag, 0, 1) == '#') {
      $name_info['video name'] = $tag;
      ++$count;
    }  
  }
  if ($count > 1) {
    // There should only be one hashtag in the first sentence.
    $name_info['valid'] = FALSE;
    $name_info['error code'] = '001';
    $name_info['error message'] = t('Invalid nomination. Nominations should '
                                  . 'only have one hashtag in the first '
                                  . 'sentence. Error occured here: !tweet', 
                                  array('!tweet' => $original_tweet));
  }
  else if ($count == 0) {
    $name_info['valid'] = FALSE;
    $name_info['error code'] = '002';
    $name_info['error message'] = t('Invalid nomination. Nominations should '
                                  . 'have a hashtag in the first sentence for '
                                  . 'the name of the video being nominated. ' 
                                  . 'Error occured here: !tweet', array('!tweet' => $original_tweet));
  } else {
    $name_info['valid'] = TRUE; 
    if ($name_info['name tag'] = video_nominee_name_tag($name_info['video name'])) {
      $name_info['new name'] = FALSE;
    }
    else {
      $name_info['new name'] = TRUE;
    } 
  } 

  return $name_info;
}



/**
 * Get video categories from tweet.
 * 
 * If video already exists, categories can only be added if tweet
 * says "Add category" or "Add categories". If tweet doesn't include these words 
 * and it's not a new nomination, nomination is not valid.
 * 
 * @return
 *  $categories = array('#one', '#two', '#three');
 */ 
function video_nominee_categories($original_tweet) {
  $tweet = strtolower($original_tweet);

  // Category tags start immediately after 'categories' or 'category'.
  if (!$start_position = strpos($tweet, 'categories')) {
    $start_position = strpos($tweet, 'category');
  }
  // If there are any category tags, they end at period.
  if ($start_position) {
    if (!$end_position = strpos($tweet, '.', $start_position)) {
      $end_position = strlen($tweet);  
    }
  }
  $categories_string = substr($tweet, $start_position, $end_position); 
  $category_tags = twitter_tweet_get_tags($categories_string);

  return $category_tags;
} 

/*
 * Assign hashtag types:
 * - video name
 * - video category 
 * 
 * @param $tags
 *  @see twitter_tweet_get_tags().
 * 
 * @param $nomination_info
 *  Array. See @return _video_nominee_nomination_info().
 * 
 * @return $tags
 *  @see twitter_tweet_get_tags().
 */
function _video_nominee_tag_types($nomination_info, $tags) {
  $video_name = $nomination_info['video name'];
  $categories = $nomination_info['video categories']; 

  // If there is a $video_name, 'video name' type should be assigned to a taxonomy term. 
  if ($video_name) {
    $tags[$video_name][] = 'video name';
  }

  // Video categories.
  foreach ($categories as $category) {
    $tags[$category][] = 'video category';
  }
  
  // Get rid of any duplicates.
  foreach ($tags as $delta => $tag) {
    $tags[$delta] = array_unique($tag);  
  }

  return $tags;
}

/**
 * Get nomination info from tweet.
 * - Determine whether tweet is a video nomination.
 * - Validate and return info about the nomination.
 * - Handle errors if nomination is not valid.
 *
 * @return $nomination_info
 *  Array 
 *  - $nomination_info['valid'] = FALSE; // Not a nomination or not valid nomination.
 *  - $nomination_info = array (
 *      'original tweet' => $original_tweet,
 *      'video name' => '#video_name', 
 *      'name tag' => $term, // taxonomy term object for video name if it already exists
 *      'video categories' => array('#category1', '#category2', '#category3') 
 *      'new video' => TRUE/FALSE,
 *      'valid' => TRUE / FALSE,
 *      'error message' => TRUE / FALSE,
 *      'error code' => 123,
 *    );
 */
function _video_nominee_nomination_info($original_tweet, $node) {
  $original_tweet = $node->field_tweet_original['und'][0]['value'];

  $nomination_info = array();
  $nomination_info['original tweet'] = $original_tweet;

  // Assume tweet does not validate. Set to TRUE as final step if it makes it that far.
  $nomination_info['valid'] = FALSE;

  // Nominations must:
  // - include the word "nominate" or "nomination"
  // - include the mention "@onlineoscars"
  $tweet = ' ' . strtolower($original_tweet);
  $includes_nominate = (strpos($tweet, 'nominate')) ? TRUE : strpos($tweet, 'nomination'); 
  $includes_onlineoscars = (strpos($tweet, '@onlineoscars')) ? TRUE : FALSE;
  if ($includes_nominate && $includes_onlineoscars) {
    $is_nomination = TRUE;
  } 
  else {
    // @todo Report validation errors to user via Twitter when validation fails.
    $nomination_info['error message'] = t('Not a video nomination. Should look like this: I nominate #my_video @onlineoscars, http://example.com/my/video. Categories: #action, #adventure, #drama.');
    $nomination_info['error code'] = '100';
    return $nomination_info;
  }

  // Validate nomination by making sure it has the minimum required parts.
  if ($is_nomination) {
    // Get video name. 
    $name_info = video_nominee_name($nomination_info, $original_tweet);
    if ($name_info['valid']) {
      $nomination_info['video name'] = $name_info['video name'];
      $nomination_info['name tag'] = $name_info['name tag'];
    }
    else {
      $nomination_info['error message'] = $name_info['error message'];
      $nomination_info['error code'] = $name_info['error code'];
      $nomination_info['video name'] = $name_info['video name'];
      return $nomination_info;
    }
    // Validate video name. 
    // If it's a new name, make sure URL is new too (not an existing URL under different name)
    
    // test URL. If URL exists under a different name, 
    // the nomination is not valid.
    // Note: If the name is not new, we don't check URL. We assume any URLs in 
    // the tweet are either referencing an existing nominee, or are relevant in 
    // the context of the tweet.
    if ($name_info['new name']) {
      $url_info = _video_nominee_url_info($node);
      $nomination_info['new video'] = $url_info['valid'];
    }

    // Get categories
    $nomination_info['video categories'] = video_nominee_categories($original_tweet);
  } 

  // If we made it to here, nomination is valid.
  $nomination_info['valid'] = TRUE;

  return $nomination_info; 
}

/**
 * Find out if valid video name is new, or if this video name already exists.
 * 
 * @param $name
 *  String. Twitter hashtag like this: #video_name.
 *
 * @return
 *  Return taxonomy $term object if name exists already. Otherwise return FALSE.
 */
function video_nominee_name_tag($name) {
  $terms = taxonomy_get_term_by_name($name);
  foreach ($terms as $term) {
    if ($term->vocabulary_machine_name == 'twitter_tags') {
      return $term;
    }
  }
  return FALSE;
}
