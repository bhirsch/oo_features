<?php
/**
 * @file
 * Code for the Video Nominee feature.
 */

include_once('video_nominee.features.inc');

/**
 * Implements hook_node_validate().
 *
 * Note: hook_node_validate() is not called when Tweets are imported 
 * from Twitter via Feeds module.
 * Feeds saves tweet nodes by calling node_save(). There is no 
 * opportunity to validate these nodes before node_saved() gets called.
 * node_save() invokes hook_node_presave(), do any "validation" stuff there.
 * Unfortunately, this limits our ability to prevent importing nodes that would 
 * normally not make it through validation. 
 * @todo This might be able to be handled with a custom Feeds processor.
 * @todo The other option is to have some sort of queue for (manually?) processing bad 
 *  nodes after they've been imported.
 */
/*
function video_nominee_node_validate($node, $form, &$form_state) {
}
// */

/**
 * When tweets are imported from twitter, check to see if they're 
 * video nominations. If they are, add relevant tags and create corresponding
 * video_nominee node.
 * 
 * Implements hook_twitter_tweet_tags_alter().
 *
 * @param $node
 *  Node object of tweet node during hook_node_presave().
 * 
 * @param $tags
 *  Array of Twitter Tags terms to be saved with $node.
 *
 * @return $tags
 *  Modified terms to save with $node.
 */
function video_nominee_twitter_tweet_tags_alter($node, $tags) {
  // Check tweet to determine if it's a video nomination. 
  // If it is, get info.
  $original_tweet = $node->field_tweet_original['und'][0]['value'];
  $nomination_info = _video_nominee_nomination_info($original_tweet);

  // If tweet is a valid nomination, 
  // assign hashtag types and create a corresponding video_nominee node.
  if ($nomination_info['valid']) { 
    $tags = _video_nominee_tag_types($original_tweet, $tags, $nomination_info['video name']);
    $author = $node->field_twitter_author['und'][0]['tid'];
    _video_nominee_create_node($nomination_info, $tags, $author);
  } 
  else {
    // @todo Process hashtags that are not new nominations.
    // 
    //   For any tweet that mentions @onlineoscars, idendify and assign types: 
    //   - video name
    //   - category
    //   
    //   Enable people to nominate existing nominees for new video categories.
  }

  return $tags;  
}

//------------------------------------------------------//
// Internal functions                                   //
//------------------------------------------------------//

/**
 * Create video_nominee node.
 * 
 * @param $nomination_info
 *  Nomination info array returned by _video_nominee_nomination_info().
 * 
 * @param $tags
 *  Taxonomy terms and tags from parent tweet node.
 * 
 * @param $author
 *  From parent tweet node: 
 *  $author = $node->field_twitter_author['und'][0]['value'];
 *  
 */
function _video_nominee_create_node($nomination_info, $tags, $author) {
  $node = new stdClass();

  $node->type = 'video_nominee';
  $node->title = $nomination_info['video name'];
  $node->field_video_url['und'][0]['url'] = $nomination_info['url'];
  // Save Twitter Author term (that is, the person who nominated this video).
  $node->field_twitter_author['und'][0]['tid'] = $author;
  // Save video name and video category Twitter Tags terms.
  $tags = _video_nominee_get_tags($tags);
  $tags = twitter_tweet_save_tags($tags);
  $node->field_twitter_tags['und'] = $tags;
  // Prepare and save node.
  node_save($node); 
}

/**
 * Validate url.
 * 
 * @param $url
 *  string, url
 * 
 * @return $url_info
 *  $url_info = array(
 *    'original' => 'http://bit.ly/xyz',
 *    'destination' => 'http://youtube.com/xyz',
 *    'valid' => TRUE, // or FALSE
 *    'error message' => 'explain why false if it's false',
 *  );
 */
function _video_nominee_validate_url($url) {
  $url_info = array();

  if (substr($url, -1 == '.')) {
    $url = substr($url, 0, -1);  
  }
  $url_info['original'] = $url;

  // Test url. Get final destination in case url sent via Twitter
  // is a shortened URL. 
  $destination = destination_url($url);
  // HTTP code should be 2xx.
  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
  $http_code = $destination['http_code'];
  if ($http_code >= 200 && $http_code < 300) {
    $url_info['destination'] = $destination['url'];
    $url_info['valid'] = TRUE;
  } 
  // Invalid url.
  else {
    $url_info['valid'] = FALSE;
    $url_info['error message'] = t('Not a valid URL. HTTP code: !code',
                                array('!code' => $http_code));
  }

  // If it's a valid URL, make sure it's unique. 
  if ($url_info['valid']) {
    // TODO
    // Check video_nominee-field_video_url to URL hasn't been nominated yet.
    // TODO 
    // If it has, report #video_name and URL.
  }

  return $url_info;
}

/**
 * Validate video name. 
 * - name must be a twitter hashtag
 * - name must be unique 
 *
 * @param $video_name
 *  Proposed name for video nominee.
 *
 * @return
 *  boolean
 * 
 * @todo Add a similar validation check in case nodes are manually added and saved.
 */
function _video_nominee_validate_name($video_name) {
  $is_valid = TRUE;
  // Check for # symbol. (required)
  if (substr($video_name, 0, 1) != '#') {
    $is_valid = FALSE;  
  }
  // Check for dashes and spaces. (invalid)
  if (strpos($video_name, '-') || strpos($video_name, ' ')) {
    $is_valid = FALSE;
  }
  // Make sure name is unique.
  if ($is_valid) {
    /*
    $result = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition(db_and()
            ->condition('type', 'video_nominee', '=')
            ->condition('title', $video_name, '=')
        )
        ->execute()
        ->fetchAssoc();
    // */
    $node = db_query("SELECT title FROM {node} "
              ."WHERE title = :title "
              ."AND type = :type ",
              array(':title' => $video_name, ':type' => 'video_nominee'))->fetch();
    if ($node->title) {
      // Name already exists. @todo notify sender of error.
      $is_valid = FALSE;
    }
  }

  return $is_valid; 
}

/**
 * Assign hashtag types:
 * - video name
 * - video category 
 * 
 * video name: 
 * - Video name is assigned by a valid nomination tweet
 * - Video name must be unique
 * - Video name immediately follows the text: "@onlineoscars nomination"
 * 
 * video category:
 * - Video categories must...
 * --- immediately follow the text: "categories" 
 * --- be preceded by a space, e.g. "categories: #one #two #etc."
 * --- end with a period, e.g. "categories: #one #two #three."
 * 
 * @param $original_tweet
 *  string
 * 
 * @param $tags
 *  @see twitter_tweet_get_tags().
 * 
 * @param $video_name
 *  boolean
 * 
 * @return $tags
 *  @see twitter_tweet_get_tags().
 */
function _video_nominee_tag_types($original_tweet, $tags, $video_name = NULL) {
  $tweet = strtolower($original_tweet);

  // If there is a $video_name, 'video name' type should be assigned to a taxonomy term. 
  if ($video_name) {
    // Find the video name hashtag.
    foreach ($tags as $tag_name => $tag_types) {
      if ($tag_name == $video_name) {
        $tags[$tag_name][] = 'video name';
      }
    }
  }
  
  // Assign 'video category' type to corresponding hashtags.
  // Category tags start immediately after 'categories:' or 'category:'.
  if (!$start_position = strpos($tweet, 'categories')) {
    $start_position = strpos($tweet, 'category');
  }
  // If there are any category tags, they end at period.
  if ($start_position) {
    if (!$end_position = strpos($tweet, '.', $start_position)) {
      $end_position = strlen($tweet);  
    }
  }
  $categories_string = substr($tweet, $start_position, $end_position); 
  $category_tags = twitter_tweet_get_tags($categories_string);
  foreach ($tags as $tag_name => $tag_types) {
    if (array_key_exists($tag_name, $category_tags)) {
      $tags[$tag_name][] = 'video category';
    }
  }
  
  return $tags;
}

/**
 * Get nomination info from tweet.
 * - Determine whether tweet is a video nomination.
 * - Validate and return info about the nomination.
 * - Handle errors if nomination is not valid.
 *
 * @return $nomination_info
 *  Array 
 *  - $nomination_info['valid'] = FALSE; // Not a nomination or not valid nomination.
 *  - $nomination_info = array (
 *      'original tweet' => $original_tweet,
 *      'video name' => '#video_name', 
 *      'url' => 'http://example.com/something', // final destination 
 *      'valid' => TRUE,
 *    );
 */
function _video_nominee_nomination_info($original_tweet) {
  $nomination_info = array();
  $nomination_info['original tweet'] = $original_tweet;

  // Assume tweet does not validate. Set to TRUE as final step if it makes it that far.
  $nomination_info['valid'] = FALSE;

  // Determine whether tweet is a video nomination.
  //   Nominations look like this: 
  //   @onlineoscars nomination: #video_name http://something.com/video/url. 
  //   categories #one #two #etc.
  $tweet = strtolower($original_tweet);
  if (substr($tweet, 0, 24) == '@onlineoscars nomination') {
    $is_nomination = TRUE; 
  } 
  else {
    // @todo Report validation errors to user via Twitter when validation fails.
    $nomination_info['error message'] = t('Not a video nomination. Nominations begin with !nomination', array('!nomination' => '"@onlineoscars nomination"'));
    return $nomination_info;
  }

  // Validate nomination by making sure it has the minimum required parts.
  if ($is_nomination) {
    $parts = explode(' ', $tweet);
    // Validate name. Verify video name is not taken.
    if ($is_valid = _video_nominee_validate_name($parts[2])) {
      $nomination_info['video name'] = $parts[2];
    }
    else {
      // @todo Report validation errors to user via Twitter when validation fails.
      $nomination_info['error message'] = t('Not a valid video name.');
      return $nomination_info;
    }
    // Validate video url. Verify $url is a valid URL.
    // Use original case from original tweet. YouTube and bit.ly have case sensitive URLs.
    $parts = explode(' ', $original_tweet);
    if ($url_info = _video_nominee_validate_url($parts[3])) {
      if ($url_info['valid']) {
        $nomination_info['url'] = $url_info['destination'];
      }
      else {
        // @todo Report validation errors to user via Twitter when validation fails.
        $nomination_info['error message'] = $url_info['error message'];
        return $nomination_info;
      }
    } 
    else { // Invalid URL.
      // @todo Report validation errors to user via Twitter when validation fails.
      $nomination_info['error message'] = t('Not a valid URL.');
      return $nomination_info;
    }
    // Verify no other videos at this URL have been nominated yet.

  } 
  // If we made it to here, nomination is valid.
  $nomination_info['valid'] = TRUE;

  return $nomination_info; 
}

/**
 * Only apply video name and video category tags to the video_nominee node.
 * 
 * @param $tags
 *  Array of $tags to be applied to parent nomination tweet.
 *    $tags['name'] = array('types', 'go', 'here');
 *    e.g. 
 *    $tags['#example'] = array('hashtag', 'x', 'y', 'z');
 *    $tags['@jane'] = array('mention', 'a', 'b', 'c');
 * 
 * @return $nominee_tags
 *  Array of tags to be applied to video_nominee node.
 *    $tags['#example'] = array('hashtag', 'video name');
 *    $tags['#example2'] = array('hashtag', 'video category');
 */
function _video_nominee_get_tags($tags) {
  $nominee_tags = array();
  foreach($tags as $name => $types) {
    if (in_array('video name', $types) || in_array('video category', $types)) {
      $nominee_tags[$name] = $types;
    }
  }

  return $nominee_tags;
}
