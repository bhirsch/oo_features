<?php
/**
 * @file
 * Code for the Video Nominee feature.
 */

include_once('video_nominee.features.inc');

/**
 * Implements hook_node_validate().
 *
 * Note: hook_node_validate() is not called when Tweets are imported 
 * from Twitter via Feeds module.
 * Feeds saves tweet nodes by calling node_save(). There is no 
 * opportunity to validate these nodes before node_saved() gets called.
 * node_save() invokes hook_node_presave(), do any "validation" stuff there.
 * Unfortunately, this limits our ability to prevent importing nodes that would 
 * normally not make it through validation. 
 * @todo This might be able to be handled with a custom Feeds processor.
 * @todo The other option is to have some sort of queue for (manually?) processing bad 
 *  nodes after they've been imported.
 */
/*
function video_nominee_node_validate($node, $form, &$form_state) {
}
// */

/**
 * Implements hook_node_presave().
 *
 * Prepare hashtag term types (hastag taxonomy terms should get
 * assigned "types", either "video name" or "video category").
 * 
 * Validate nomination tweet. Valid nominations look like this: 
 *   @onlineoscars nomination: #video_name http://something.com/video/url. 
 *   Categories: #one #two #etc.
 * 
 * Create corresponding video_nominee node.
 */
function video_nominee_node_presave($node) {
  if ($node->type == 'tweet') {

    // Determine whether tweet is a video nomination.
    foreach ($node->field_tweet_original as $field_tweet_original) {
      // Nominations look like this: 
      // @onlineoscars nomination: #video_name http://something.com/video/url. 
      // categories #one #two #etc.
      $tweet = strtolower($field_tweet_original[0]['value']);
      $is_nomination = (substr($tweet, 0, 25) == '@onlineoscars nomination:') ? TRUE : FALSE;
    }

    // @todo Report validation errors to user via Twitter when validation fails.
    //
    // Validate nomination by making sure it has the minimum required parts.
    if ($is_nomination) {
      $parts = explode(' ', $tweet);
      // Validate name. Verify $video_name is not taken.
      $video_name = $parts[2];
      $is_valid = _video_nominee_validate_name($video_name);
      // Validate video url. Verify $url is a valid URL.
      $url = $parts[3];
      $url = _video_nominee_validate_url($url);
      $is_valid = ($url) ? $is_valid : FALSE; 
      // Verify no other videos at this URL have been nominated yet.
      // TODO
    }

    // If tweet is a valid nomination, 
    // assign hashtag types.
    if ($is_nomination && $is_valid) { 
      //$node = video_nominee_hashtag_types($node, $parts, $video_name);
      $node = video_nominee_hashtag_types($node, $parts, $video_name);
    } else if (!$is_nomination) {
      // @todo Should we process hashtags that are not nominations?
    }

    // If tweed is a valid nomination, create a corresponding video_nominee node.
    if ($is_nomination && $is_valid) { 
      $video_node = new stdClass();
      $video_node->title = $video_name;
      $video_node->type = 'video_nominee';
      $video_node->field_online_video_url['und'][0]['value'] = $url;
      $video_node->field_online_video_url['und'][0]['format'] = 'plain_text'; // @todo replace this with video_filter widget
      // TODO add taxonomy to video_nominee node.
      // Twitter author
      // Category hashtags
      // Video name hashtag
      node_object_prepare($video_node);
      node_save($video_node); 
    } else if ($is_nomination == TRUE && $is_valid == FALSE) { 
      // @todo.
      // Notify submitter nomination failed.
      // Build a queue of invalid nominations to process/handle.
    }
  } // end if ($node->type == 'tweet')
}

/**
 * Implements hook_field_presave().
 */
/*
function video_nominee_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
   dsm('calling hook_field_presave');
   dsm($entity_type, 'entity_type');
   dsm($entity, 'entity');
   dsm($field, 'field');
   dsm($instance, 'instance');
   dsm($items, 'items'); 
 }
// */

/**
 * Validate url.
 * 
 * @param $url
 *  string, url
 * 
 * @return
 *  Valid url (string), or FALSE. 
 */
function _video_nominee_validate_url($url) {
  if (substr($url, -1 == '.')) {
    $url = substr($url, 0, -1);  
  }
  // Test url. Get final destination in case url sent via Twitter
  // is a shortened URL. 
  $destination = destination_url($url);
  // HTTP code should be 2xx.
  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
  $http_code = $destination['http_code'];
  if ($http_code >= 200 && $http_code < 300) {
    $url = $destination['url'];
  } else {
    // Invalid url.
    $url = FALSE; 
  }

  return $url;
}

/**
 * Validate video name. 
 * - name must be a twitter hashtag
 * - name must be unique 
 *
 * @param $video_name
 *  Proposed name for video nominee.
 *
 * @return
 *  boolean
 */
function _video_nominee_validate_name($video_name) {
  $is_valid = TRUE;
  // Check for # symbol. (required)
  if (substr($video_name, 0, 1) != '#') {
    $is_valid = FALSE;  
  }
  // Check for dashes and spaces. (invalid)
  if (strpos($video_name, '-') || strpos($video_name, ' ')) {
    $is_valid = FALSE;
  }
  // Make sure name is unique.
  if ($is_valid) {
    /*
    $result = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition(db_and()
            ->condition('type', 'video_nominee', '=')
            ->condition('title', $video_name, '=')
        )
        ->execute()
        ->fetchAssoc();
    // */
    $node = db_query("SELECT title FROM {node} "
              ."WHERE title = :title "
              ."AND type = :type ",
              array(':title' => $video_name, ':type' => 'video_nominee'))->fetch();
    if ($node->title) {
      // Name already exists. @todo notify sender of error.
      $is_valid = FALSE;
    }
  }

  return $is_valid; 
}

/**
 * Assign hashtag types:
 * - video name
 * - video category 
 * 
 * video name: 
 * - Video name is assigned by a valid nomination tweet
 * - Video name must be unique
 * - Video name immediately follows the text: "@onlineoscars nomination:"
 * 
 * video category:
 * - Video categories must...
 * --- immediately follow the text: "categories:" 
 * --- be preceded by a space, e.g. "categories: #one #two #etc."
 * --- end with a period, e.g. "categories: #one #two #three."
 * @todo make this less fragile. For example, this wouldn't work: 
 *   "...blah blah blah.categories:#one, #two,#three."
 * 
 * @param $node
 *  $node object for a tweet node.
 * 
 * @param $parts
 *  $parts = explode(' ', $tweet);
 * 
 * @param $video_name
 *  boolean
 * 
 * @return $node
 *  $node object
 */
// TODO CONTINUE HERE. Finish. (See twitter_tweet.module. Replace this with implementation of hook_twitter_tag_type(). )
function video_nominee_hashtag_types($node, $parts, $video_name = NULL) {
  $hashtags = $node->field_twitter_hashtags['und'];

  // If there is a $video_name, 'video name' type should be assigned to a taxonomy term. 
  if ($video_name) {
    // Find the video name hashtag.
    foreach ($hashtags as $key => $term) {
      if ($term['name'] == $video_name) {
        // If tweet is a valid video nomination, 
        // and hashtag type is not set yet...
        if ($parts[0] == '@onlineoscars' && $parts[1] == 'nomination:'
        && !isset($hashtag['field_twitter_hashtag_type'])) {
            $node->field_twitter_hashtags['und'][$key]['field_twitter_hashtag_type']['und'][0]['value'] = 'video name';
        }
      }
    }
  }
  
  // Assign 'video category' type to corresponding hashtags.
  $is_category = FALSE;  
  foreach ($parts as $part) {
    // Loop through until we reach category hashtags.
    if (substr($part, 0, 11) == 'categories:') {
      $is_category = TRUE; 
    }
    // CONTINUE HERE
    // TODO Figure out how to parse this.
    //   Consider using twitter_tweet_get_hashtags($original_tweet)
    //   from twitter_tweet.module line 75
    if (substr($part, -1) == '.') {
      $is_category = FALSE; // Category tags end at period.
    }
  }
   
}
