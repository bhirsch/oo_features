<?php
/**
 * @file
 * Code for the Video Nominee feature.
 */

include_once('video_nominee.features.inc');
include_once('video_nominee.theme.inc');

/**
 * Implements hook_menu_alter().
 */
// TODO Why isnt this working?!?!?!?!?!
function video_nominee_menu_alter(&$items) {
  dsm($items);  
  dsm('testing 1 2 3');
}

/**
 * Implements hook_page_build().
 * 
 * @todo Seems like it would better to modify output with 
 *  hook_taxonomy_term_view_alter() and maybe hook_preprocess_taxonomy_term()
 *  rather than hook_page_build() and hook_page_alter() 
 *  but these hooks aren't firing for some reason.
 */
function video_nominee_page_build(&$build) {
  if (arg(0) == 'taxonomy' && arg(1) == 'term' && arg(3) != 'edit') {
//dsm($build, 'build');  
    // Find out what type of term this is.  
    $tid = arg(2);
    // @todo This should be a context. 
    //   For now store context in path alias.
// TODO TRY CONTEXT->PATH BEFORE IMPLEMENTING THIS HACK.
//dsm(drupal_get_path_alias(), 'alias');
    if ($tag_types = twitter_tweet_get_tag_types($tid)) {
      //dsm($tag_types, 'tag_types');
      // @todo We should have tighter control around Twitter Tag Types.
      //  It should be impossible for a Twitter Tag to be tagged with type
      //  'video name' AND 'video category'. It's either a video name OR a video
      //  category. Similarly, it's either a hashtag OR a mention.
      if (in_array('video name', $tag_types)) {
        
      } 
      else if (in_array('video category', $tag_types)) {
        
      }
    }
  }
}
// */

/**
 * Implements hook_form_alter().
 */
/*
function video_nominee_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'taxonomy_form_term') {
    //dsm($form_id, 'form_id');
    //dsm($form, 'form');
    $form['#validate'][] = 'video_nominee_form_test';
  }
}
function video_nominee_form_test(&$form, &$form_state) {
  dsm($form_state,'form_state validating');  
}
// */

/**
 * Implements hook_page_alter().
 */
/*
function video_nominee_page_alter(&$page) {
  //dsm($page, 'page');  
}
// */

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * @todo Figure out why this function isn't being called.
 */
/*
function video_nominee_preprocess_taxonomy_term(&$variables) {
  dsm($variables, 'variables');  
}
// */

/**
 * Implements hook_taxonomy_term_view_alter(&$build).
 * 
 * @todo Figure out why this function isn't being called.
 */
/*
function video_nominee_taxonomy_term_view_alter(&$build) {
  dsm($build, 'build');  
}
// */

function video_nominee_twitter_tweet_twitter_tag_alias_alter($term, $alias) {
  if (empty($term->tid)) {
    drupal_set_message("Tid is empty. This shouldn't happen. Please contact administrator.", 'error');
  } else {
    $types = twitter_tweet_get_tag_types($term); 
  }
  if (in_array('video name', $types)) {
    $type = 'video name';   
    return "video-name/$term->tid";
  } else if (in_array('video category', $types)) {
    $type = 'video category';   
    return "video-category/$term->tid";
  } else {
    return $alias;
  }
}
/**
 * Implements hook_taxonomy_term_presave(). 
 * 
 * Add context via path alias.
 */
 /*
function video_nominee_taxonomy_term_presave($term) {
  if ($term->vocabulary_machine_name == 'twitter_tags') {
    if (empty($term->tid)) {
      $types = array();
      foreach ($term->field_twitter_tag_types as $tag_types) {
        foreach ($tag_types as $tag_type) {
          $types[] = $tag_type['name'];
        }
      }
    } else {
      $types = twitter_tweet_get_tag_types($term); 
    }
    // Validation.
    if (in_array('video name', $types) && in_array('video category', $types)) {
      // @todo This should never happen. Throw error.  
    } else if (in_array('video name', $types)) {
      $type = 'video name';   
    } else if (in_array('video category', $types)) {
      $type = 'video category';   
    }
    // All video names and video categories are Twitter hashtags, beginning with #.
    $name = $term->name;
    switch ($type) {
      case 'video name':
        $term->path['alias'] = t('video') . '/' . substr($name, 1);  
        //$term->path['alias'] = t('video-name') . '/' . substr($name, 1);  
        //$term->path['alias'] = t('video-name') . '/' . $name;  
        break;

      case 'video category': 
        $term->path['alias'] = t('video-category') . '/' . substr($name, 1);  
        //$term->path['alias'] = t('video-category') . '/' . substr($name, 1);  
        //$term->path['alias'] = t('video-category') . '/' . $name;  
        break;
    }
  }
}
// */

/**
 * Implements hook_node_validate().
 *
 * Note: hook_node_validate() is not called when Tweets are imported 
 * from Twitter via Feeds module.
 * Feeds saves tweet nodes by calling node_save(). There is no 
 * opportunity to validate these nodes before node_saved() gets called.
 * node_save() invokes hook_node_presave(), do any "validation" stuff there.
 * Unfortunately, this limits our ability to prevent importing nodes that would 
 * normally not make it through validation. 
 * @todo This might be able to be handled with a custom Feeds processor.
 * @todo The other option is to have some sort of queue for (manually?) processing bad 
 *  nodes after they've been imported.
 */
/*
function video_nominee_node_validate($node, $form, &$form_state) {
}
// */

/**
 * When tweets are imported from twitter, check to see if they're 
 * video nominations. If they are, add relevant tags and create corresponding
 * video_nominee node.
 * 
 * Implements hook_twitter_tweet_tags_alter().
 *
 * @param $node
 *  Node object of tweet node during hook_node_presave().
 * 
 * @param $tags
 *  Array of Twitter Tags terms to be saved with $node.
 *
 * @return $tags
 *  Modified terms to save with $node.
 */
function video_nominee_twitter_tweet_tags_alter($node, $tags) {
  // Check tweet to determine if it's a video nomination. 
  // If it is, get info.
  $original_tweet = $node->field_tweet_original['und'][0]['value'];
  $nomination_info = _video_nominee_nomination_info($original_tweet);

  // If tweet is a valid nomination, 
  // assign hashtag types and create a corresponding video_nominee node.
  if ($nomination_info['valid']) { 
    $tags = _video_nominee_tag_types($original_tweet, $tags, $nomination_info['video name']);
    $author = $node->field_twitter_author['und'][0]['tid'];
    _video_nominee_create_node($nomination_info, $tags, $author);
  } 
  else {
    switch ($nomination_info['error code']) {
      case 100: // Tweet is not a nomination.   
      break;

      case 102: // Invalid URL.
      break;
      case 103: // No URL found in tweet.
      break;

      case 104: // Video name doesn't begin with #.
      break;
      case 105: // No dashes or spaces allowed in name.
      break;
      case 106: // Video name already exists.
      break;
    } // End switch ($nomination_info['error code']).
    // TODO Log errors to watchdog.
    $txt = t('Please contact and administrator about the tweet: !tweet. ', 
             array('!tweet' => $nomination_info['original tweet']));
    $txt .= $nomination_info['error message'];
    drupal_set_message($txt, 'warning');
    // @todo Process hashtags that are not new nominations.
  }

  return $tags;  
}

//------------------------------------------------------//
// Internal functions                                   //
//------------------------------------------------------//

/**
 * Create video_nominee node.
 * 
 * @param $nomination_info
 *  Nomination info array returned by _video_nominee_nomination_info().
 * 
 * @param $tags
 *  Taxonomy terms and tags from parent tweet node.
 * 
 * @param $author
 *  From parent tweet node: 
 *  $author = $node->field_twitter_author['und'][0]['value'];
 *  
 */
function _video_nominee_create_node($nomination_info, $tags, $author) {
  $node = new stdClass();

  $node->type = 'video_nominee';
  $node->title = $nomination_info['video name'];
  $node->field_video_url['und'][0]['url'] = $nomination_info['url'];
  // Save Twitter Author term (that is, the person who nominated this video).
  $node->field_twitter_author['und'][0]['tid'] = $author;
  // Save video name and video category Twitter Tags terms.
  $tags = _video_nominee_get_tags($tags);
  $tags = twitter_tweet_save_tags($tags);
  $node->field_twitter_tags['und'] = $tags;
  // Prepare and save node.
  node_save($node); 
}

/**
 * Validate url.
 * 
 * @param $url
 *  string, url
 * 
 * @return $url_info
 *  $url_info = array(
 *    'original' => 'http://bit.ly/xyz',
 *    'destination' => 'http://youtube.com/xyz',
 *    'valid' => TRUE, // or FALSE
 *    'error message' => 'explain why false if it's false',
 *  );
 */
function _video_nominee_validate_url($url) {
  $url_info = array();

  if (substr($url, -1 == '.')) {
    $url = substr($url, 0, -1);  
  }
  $url_info['original'] = $url;

  // Test url. Get final destination in case url sent via Twitter
  // is a shortened URL. 
  $destination = destination_url($url);
  // HTTP code should be 2xx.
  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
  $http_code = $destination['http_code'];
  if ($http_code >= 200 && $http_code < 300) {
    $url_info['destination'] = $destination['url'];
    $url_info['valid'] = TRUE;
  } 
  // Invalid url.
  else {
    $url_info['valid'] = FALSE;
    $url_info['error message'] = t('Not a valid URL. HTTP code: !code',
                                array('!code' => $http_code));
  }

  // If it's a valid URL, make sure it's unique. 
  if ($url_info['valid']) {
    // TODO
    // Check video_nominee-field_video_url to URL hasn't been nominated yet.
    // TODO 
    // If it has, report #video_name and URL.
  }

  return $url_info;
}

/**
 * Validate video name. 
 * - name must be a twitter hashtag
 * - name must be unique 
 *
 * @param $video_name
 *  Proposed name for video nominee.
 *
 * @return $name_info 
 *  Array. $name_info = array(
 *    'valid' => TRUE,
 * 
 *    'valid' => FALSE,
 *    'error code' => 1xx,
 *    'name tag' => $term, // A tag by this name already exists, return it's term object
 *  );
 * 
 * @todo Add a similar validation check in case nodes are manually added and saved.
 */
function _video_nominee_validate_name($video_name) {
  $is_valid = TRUE;
  // Check for # symbol. (required)
  if (substr($video_name, 0, 1) != '#') {
    $name_info['error code'] = 104;
    $name_info['error message'] = t('Video names must begin with #.');
    $is_valid = FALSE;
  }
  // Check for dashes and spaces. (invalid)
  if (strpos($video_name, '-') || strpos($video_name, ' ')) {
    $name_info['error code'] = 105;
    $name_info['error message'] = t('No dashes or spaces allowed in name.');
    $is_valid = FALSE;
  }
  // Make sure name is unique.
  if ($is_valid) {
    /*
    $result = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition(db_and()
            ->condition('type', 'video_nominee', '=')
            ->condition('title', $video_name, '=')
        )
        ->execute()
        ->fetchAssoc();
    // */
    $results = db_query("SELECT title FROM {node} "
              ."WHERE title = :title "
              ."AND type = :type ",
              array(':title' => $video_name, ':type' => 'video_nominee'))->fetchAllAssoc('title');
    if (is_array($results) && !empty($results)) {
      /*
      // Name already exists. @todo notify sender of error.
      $terms = taxonomy_get_term_by_name($video_name);  
      // Terms are treturned like this: 663 => stdClass where 663 is a term id.
      foreach ($terms as $term) {
        $tag = $term; // There should only be one of these. 
      }
      $name_info['video name'] = $video_name;
      $name_info['name tag'] = $tag;
      // */
      $name_info['error code'] = 106;
      $name_info['error message'] = t('Video name already exists.');
      $is_valid = FALSE;
    }
  }
  $name_info['valid'] = $is_valid;

  return $name_info;
}

/**
 * Assign hashtag types:
 * - video name
 * - video category 
 * 
 * video name: 
 * - Video name is assigned by a valid nomination tweet
 * - Video name must be unique
 * - Video name immediately follows the text: "@onlineoscars nomination"
 * 
 * video category:
 * - Video categories must...
 * --- immediately follow the text: "categories" 
 * --- be preceded by a space, e.g. "categories: #one #two #etc."
 * --- end with a period, e.g. "categories: #one #two #three."
 * 
 * @param $original_tweet
 *  string
 * 
 * @param $tags
 *  @see twitter_tweet_get_tags().
 * 
 * @param $video_name
 *  boolean
 * 
 * @return $tags
 *  @see twitter_tweet_get_tags().
 */
function _video_nominee_tag_types($original_tweet, $tags, $video_name = NULL) {
  $tweet = strtolower($original_tweet);

  // If there is a $video_name, 'video name' type should be assigned to a taxonomy term. 
  if ($video_name) {
    // Find the video name hashtag.
    foreach ($tags as $tag_name => $tag_types) {
      if ($tag_name == $video_name) {
        $tags[$tag_name][] = 'video name';
      }
    }
  }
  
  // Assign 'video category' type to corresponding hashtags.
  // Category tags start immediately after 'categories:' or 'category:'.
  if (!$start_position = strpos($tweet, 'categories')) {
    $start_position = strpos($tweet, 'category');
  }
  // If there are any category tags, they end at period.
  if ($start_position) {
    if (!$end_position = strpos($tweet, '.', $start_position)) {
      $end_position = strlen($tweet);  
    }
  }
  $categories_string = substr($tweet, $start_position, $end_position); 
  $category_tags = twitter_tweet_get_tags($categories_string);
  foreach ($tags as $tag_name => $tag_types) {
    if (array_key_exists($tag_name, $category_tags)) {
      $tags[$tag_name][] = 'video category';
    }
  }

  // @todo for some reason this is breaking when there are additional mentions after categories. figure out why.
  
  return $tags;
}

/**
 * Get nomination info from tweet.
 * - Determine whether tweet is a video nomination.
 * - Validate and return info about the nomination.
 * - Handle errors if nomination is not valid.
 *
 * @return $nomination_info
 *  Array 
 *  - $nomination_info['valid'] = FALSE; // Not a nomination or not valid nomination.
 *  - $nomination_info = array (
 *      'original tweet' => $original_tweet,
 *      'video name' => '#video_name', 
 *      'url' => 'http://example.com/something', // final destination 
 *      'valid' => TRUE / FALSE,
 *      'error message' => TRUE / FALSE,
 *      'error code' => 123,
 *    );
 */
function _video_nominee_nomination_info($original_tweet) {
  $nomination_info = array();
  $nomination_info['original tweet'] = $original_tweet;

  // Assume tweet does not validate. Set to TRUE as final step if it makes it that far.
  $nomination_info['valid'] = FALSE;

  // Determine whether tweet is a video nomination.
  //   Nominations look like this: 
  //   @onlineoscars nomination: #video_name http://something.com/video/url. 
  //   categories #one #two #etc.
  $tweet = strtolower($original_tweet);
  // TODO
  // CONTINUE HERE MAKE TWEETS MORE HUMAN READABLE.
  // LIKE "nominate: #battle_at_kruger @onlineoscard, http://something. 
  // categories: #one #two #three."
  if (substr($tweet, 0, 24) == '@onlineoscars nomination') {
    $is_nomination = TRUE; 
  } 
  else {
    // @todo Report validation errors to user via Twitter when validation fails.
    $nomination_info['error message'] = t('Not a video nomination. Nominations begin with !nomination', array('!nomination' => '"@onlineoscars nomination"'));
    $nomination_info['error code'] = '100';
    return $nomination_info;
  }

  // Validate nomination by making sure it has the minimum required parts.
  if ($is_nomination) {
    $parts = explode(' ', $tweet);
    // Validate name. Verify video name is not taken.
    $name_info = _video_nominee_validate_name($parts[2]);
    if ($name_info['valid']) {
      $nomination_info['video name'] = $parts[2];
    }
    else {
      // @todo Report validation errors to user via Twitter when validation fails.
      $nomination_info['error message'] = $name_info['error message'];
      $nomination_info['error code'] = $name_info['error code'];
      $nomination_info['name tag'] = $name_info['name tag'];
      $nomination_info['video name'] = $name_info['video name'];
      return $nomination_info;
    }
    // Validate video url. Verify $url is a valid URL.
    // Use original case from original tweet. YouTube and bit.ly have case sensitive URLs.
    $parts = explode(' ', $original_tweet);
    // Find the first URL in in the tweet. 
    // URL should be $part[3], but it might not be if someone miss typed.
    $i = 0;
    $found_url = FALSE;
    do {
      if (substr($parts[$i], 0, 7) == 'http://') {
        $url_info = _video_nominee_validate_url($parts[$i]);
        $found_url = TRUE;
      }  
      $i++;
    } while ($found_url == FALSE && $i < count($parts)); 
    if ($url_info) {
      if ($url_info['valid']) {
        $nomination_info['url'] = $url_info['destination'];
      }
      else {
        // @todo Report validation errors to user via Twitter when validation fails.
        $nomination_info['error message'] = $url_info['error message'];
        $nomination_info['error code'] = '102';
        return $nomination_info;
      }
    } 
    else { // Invalid URL.
      // @todo Report validation errors to user via Twitter when validation fails.
      $nomination_info['error message'] = t('No URL found in tweet.');
      $nomination_info['error code'] = '103';
      return $nomination_info;
    }
    // Verify no other videos at this URL have been nominated yet.

  } 
  // If we made it to here, nomination is valid.
  $nomination_info['valid'] = TRUE;

  return $nomination_info; 
}

/**
 * Only apply video name and video category tags to the video_nominee node.
 * 
 * @param $tags
 *  Array of $tags to be applied to parent nomination tweet.
 *    $tags['name'] = array('types', 'go', 'here');
 *    e.g. 
 *    $tags['#example'] = array('hashtag', 'x', 'y', 'z');
 *    $tags['@jane'] = array('mention', 'a', 'b', 'c');
 * 
 * @return $nominee_tags
 *  Array of tags to be applied to video_nominee node.
 *    $tags['#example'] = array('hashtag', 'video name');
 *    $tags['#example2'] = array('hashtag', 'video category');
 */
function _video_nominee_get_tags($tags) {
  $nominee_tags = array();
  foreach($tags as $name => $types) {
    if (in_array('video name', $types) || in_array('video category', $types)) {
      $nominee_tags[$name] = $types;
    }
  }

  return $nominee_tags;
}

